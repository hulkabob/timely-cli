#!/bin/env python
# vim: set ft=python ts=2

################################################################################
# Planned features:
# timely me - get current user
#        config - set defaults
#        cover - delete records
#        fix - fix existing time records
#        init - set up timely with defaults
#        show - view records
#        list - list hours
#        log - log time with presets
################################################################################

from datetime import datetime, timedelta
import os
import argparse
import calendar
from graphics import curses_cal
from config import BEARER_TOKEN,HEADERS,init
from termcolor import cprint
import pytz
import requests

# https://api.timelyapp.com/1.1/accounts Array of Accounts
# https://api.timelyapp.com/1.1/${accountId}/users/current Current User
# https://api.timelyapp.com/1.1/${accountId}/labels Tags
# https://api.timelyapp.com/${accountId}/hours POST only hours
# https://app.timelyapp.com/${accountId}/hours.json?projects_version=3&since=2024-01-01&upto=2025-02-02&user_id=${userId} GET Hours

# Example tracking data (Day: Hours Tracked)
tracking_data = {1: 8, 2: 4, 3: 6, 5: 1, 8: 7, 12: 3, 15: 2, 18: 0, 20: 5}

def get_me():
    response = requests.get(
        "https://api.timelyapp.com/1.1/{}/users/current".format(config["org"]["id"]),
        headers=HEADERS,
        timeout=10
    )
    print(response.json())

def recurseprint(json, name, field, i):
    if len(json) != 0:
        for each in json[field]:
            recurseprint(each[field], name, field, i+1)
            print(each)
    return


def get_labels():
    # TODO: Prettify output
    labels = requests.get(
        "https://api.timelyapp.com/1.1/{}/labels".format(config["org"]["id"]), 
        headers=HEADERS,
        timeout=10
    ).json()
    for item in labels:
        recurseprint(item, "name", "children", 0)

def log_time(note, duration, date_iso):
    # TODO: Add time support (From/To)
    dt = datetime.strptime(date_iso, "%Y-%m-%d")
    dt_start = dt.replace(
        hour=config["prefs"]["staringHour"],
        minute=0,
        second=0,
        microsecond=0,
        tzinfo=pytz.timezone('Europe/Kyiv')
    )
    dt_stop = dt_start + timedelta(hours=duration)
    timestamp_start = dt_start.strftime("%Y-%m-%dT%H:%M:%S.000")
    timestamp_stop = dt_stop.strftime("%Y-%m-%dT%H:%M:%S.000")

    data = {
      "event": {
        "day": date_iso,
        "note": note,
        "timer_state": "default",
        "timer_started_on": 0,
        "timer_stopped_on": 0,
        "project_id": config["prefs"]["projectId"],
        "forecast_id": None,
        "label_ids": config["prefs"]["tags"],
        "user_ids": [],
        "entry_ids": [],
        "from": timestamp_start,
        "to": timestamp_stop,
        "timestamps": [
          {
            "from": timestamp_start,
            "to": timestamp_stop,
            "entry_ids": []
          }
        ],
        "hours": duration,
        "minutes": 0,
        "seconds": 0,
        "estimated_hours": 0,
        "estimated_minutes": 0,
        "sequence": 1,
        "billable": False,
        "context": {
          "interaction": "Click New Entry Button",
          "view_context": "Calendar",
          "memory_view": "Timeline",
          "calendar_view": "Month",
          "has_timer": False
        },
        "state_id": None,
        "billed": False,
        "locked": False,
        "locked_reason":  None,
        "external_links": [],
        "user_id": config["user"]["id"]
      }
    }
    response = requests.post(f'https://app.timelyapp.com/{config["org"]["id"]}/hours',
                             json=data,
                             headers=HEADERS,
                             timeout=10
                             )
    if response.status_code == 201:
        cprint('Added {duration} hours for {date}'.format(duration=duration, date=date_iso), 'green')
    else:
        cprint('Error during request, see content below', "red")
        print(f'Status code: {response.status_code}')
        print(response.content)

def show_time(iso_from, iso_to):
    """
    api returns 
        .[day].day - ISO day str
        .[day].duration.hours - int hours
        .[day].duration.minutes - int minutes
        .[day].duration.seconds - int seconds
        .[day].note - str note
        .[day].id - int record ID
        .[day].sequence - int index, when multiple records per day
        .[day].from - day in format 2025-01-01T12:00:00+02:00"
        .[day].to - day in format 2025-01-01T12:00:00+02:00"
    """
    response = requests.get(
        "https://app.timelyapp.com/{}/hours.json".format(config["org"]["id"]),
        params={
            "projects_version": 3,
            "since": iso_from,
            "upto": iso_to,
            "user_id": config["user"]["id"]
        },
        headers=HEADERS,
        timeout=10
    )
    if response.status_code == 200:
        # TODO: Prepare data for calendar
        # TODO: Make calendar print data properly
        curses.wrapper(curses_cal)
    else:
        cprint('Error during request, see content below', "red")
        print(f'Status code: {response.status_code}')
        print(response.request.url)
        print(response.request.body)
        print(response.request.headers)
        print(response.content)


config = init()

parser = argparse.ArgumentParser(description="Timely CLI")
parser.add_argument("action", choices=["me", "log", "list", "fix", "cover", "tags", "config", "show"])
parser.add_argument("--note", help="Log note", default="")
parser.add_argument("--duration", help="Duration in h(ours) or m(minutes)", default="6h")
parser.add_argument("--day", help="Day in ISO format (2024-12-31)", default="")
parser.add_argument("--iso-from", help="Day in ISO format, from which show hours", default="")
parser.add_argument("--iso-to", help="Day in ISO format, to which show hours", default="")

args = parser.parse_args()
unit = args.duration[-1]
amount = int(args.duration[:-1])

if args.action == "me":
    get_me()
elif args.action == "log":
    # TODO: Add From and To with time parse
    log_time(args.note, amount, args.day)
elif args.action == "tags":
    get_labels()
elif args.action == "show":
    show_time(args.iso_from, args.iso_to)
