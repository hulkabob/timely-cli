#!/bin/env python

"""
Interface timely api sneakily.

 dMMMMMMP dMP dMMMMMMMMb dMMMMMP dMP    dMP dMP 
   dMP   amr dMP"dMP"dMPdMP     dMP    dMP.dMP  
  dMP   dMP dMP dMP dMPdMMMP   dMP     VMMMMP   
 dMP   dMP dMP dMP dMPdMP     dMP    dA .dMP    
dMP   dMP dMP dMP dMPdMMMMMP dMMMMMP VMMMP"  
"""
# vim: set ft=python ts=2
################################################################################
# Planned features:
# timely me - get current user
#        cover - delete records
#        fix - fix existing time records
#        init - set up timely with defaults
#        show - view records
#        log - log time with presets
# Unplanned features:
#        projects - list projects
#        tags - list tags
#        ping - check token
#        --plain - print without interactive features
#        --json - print outputs in JSON
################################################################################

from datetime import datetime
from zoneinfo import ZoneInfo
import argparse
import curses
import sys
from termcolor import cprint
import requests
from graphics import curses_cal
from utils import parse_duration
from config import HEADERS,init,get_projects,get_tags

# https://api.timelyapp.com/1.1/accounts Array of Accounts
# https://api.timelyapp.com/1.1/${accountId}/users/current Current User
# https://api.timelyapp.com/1.1/${accountId}/labels Tags
# ~https://api.timelyapp.com/1.1/${accountId}/projects Projects~ Sucks.
# https://api.timelyapp.com/${accountId}/hours POST only hours
# https://app.timelyapp.com/${accountId}/hours.json?projects_version=3&since=2024-01-01&upto=2025-02-02&user_id=${userId} GET Hours
# https://app.timelyapp.com/${accountId}/labels.json?filter=all&limit=500&offset=0 Tags
# https://app.timelyapp.com/${accountId}/projects.json?filter=active&limit=1000&offset=0&totals=false&version=3 Projects

def get_me():
    response = requests.get(
        "https://api.timelyapp.com/1.1/{}/users/current".format(config["org"]["id"]),
        headers=HEADERS,
        timeout=10
    )
    print(response.json())


def log_time(note, duration, date_iso, time_from=None, time_to=None):
    dt = datetime.strptime(date_iso, "%Y-%m-%d").replace(tzinfo=ZoneInfo(config["user"]["timezone"]))

    if duration is not None:
        td_duration = parse_duration(duration)
    else:
        td_duration = None

    if time_from is None:
        starting_time = datetime.strptime(config["prefs"]["staringTime"], "%H:%M").time()
        dt_start = dt.replace(
            hour=starting_time.hour,
            minute=starting_time.minute,
            second=0,
            microsecond=0)
    else:
        dt_start = datetime.combine(dt,
                                    datetime.strptime(time_from, "%H:%M").time(),
                                    tzinfo=ZoneInfo(config["user"]["timezone"]))

    if time_to is None:
        td_duration = parse_duration(duration)
        dt_stop = dt_start + td_duration
    else:
        dt_stop = datetime.combine(dt,
                                   datetime.strptime(time_to, "%H:%M").time(),
                                   tzinfo=ZoneInfo(config["user"]["timezone"]))
        if dt_stop - dt_start != td_duration and td_duration is not None:
            cprint("[!] You've specified time and duration. Sure you can do so, but they don't add up.", "red")
            cprint(f"    From {dt_start} to {dt_stop} doesn't equal {td_duration}", "cyan")
            sys.exit(2)


    timestamp_start = dt_start.strftime("%Y-%m-%dT%H:%M:%S.000%z")
    timestamp_stop = dt_stop.strftime("%Y-%m-%dT%H:%M:%S.000%z")

    data = {
      "event": {
        "day": date_iso,
        "note": note,
        "timer_state": "default",
        "timer_started_on": 0,
        "timer_stopped_on": 0,
        "project_id": config["prefs"]["projectId"],
        "forecast_id": None,
        "label_ids": config["prefs"]["tags"],
        "user_ids": [],
        "entry_ids": [],
        "from": timestamp_start,
        "to": timestamp_stop,
        "timestamps": [
          {
            "from": timestamp_start,
            "to": timestamp_stop,
            "entry_ids": []
          }
        ],
        "hours": td_duration.seconds // 3600,
        "minutes": (td_duration.seconds % 3600) // 60,
        "seconds": 0,
        "estimated_hours": 0,
        "estimated_minutes": 0,
        "sequence": 1,
        "billable": False,
        "context": {
          "interaction": "Click New Entry Button",
          "view_context": "Calendar",
          "memory_view": "Timeline",
          "calendar_view": "Month",
          "has_timer": False
        },
        "state_id": None,
        "billed": False,
        "locked": False,
        "locked_reason":  None,
        "external_links": [],
        "user_id": config["user"]["id"]
      }
    }
    #print(f'https://app.timelyapp.com/{config["org"]["id"]}/hours')
    #print(data["event"]["from"])
    #print(data["event"]["to"])
    response = requests.post(f'https://app.timelyapp.com/{config["org"]["id"]}/hours',
                             json=data,
                             headers=HEADERS,
                             timeout=10
                             )
    if response.status_code == 201:
        cprint('Added {duration} hours for {date}'.format(duration=duration, date=date_iso), 'green')
    else:
        cprint('Error during request, see content below', "red")
        print(f'Status code: {response.status_code}')
        print(response.content)

def show_time(iso_from, iso_to, plain):
    """
    api returns 
        .[day].day - ISO day str
        .[day].duration.hours - int hours
        .[day].duration.minutes - int minutes
        .[day].duration.seconds - int seconds
        .[day].note - str note
        .[day].id - int record ID
        .[day].sequence - int index, when multiple records per day
        .[day].from - day in format 2025-01-01T12:00:00+02:00"
        .[day].to - day in format 2025-01-01T12:00:00+02:00"
    """
    response = requests.get(
        "https://app.timelyapp.com/{}/hours.json".format(config["org"]["id"]),
        params={
            "projects_version": 3,
            "since": iso_from,
            "upto": iso_to,
            "user_id": config["user"]["id"]
        },
        headers=HEADERS,
        timeout=10
    )
    if response.status_code == 200:
        # TODO: Prepare data for calendar
        # TODO: Make calendar print data properly
        if plain:
            cprint("Calendar data should be here sometime")
        else:
            curses.wrapper(curses_cal)
    else:
        cprint('Error during request, see content below', "red")
        print(f'Status code: {response.status_code}')
        print(response.request.url)
        print(response.request.body)
        print(response.request.headers)
        print(response.content)


config = init()

parser = argparse.ArgumentParser(description="Timely CLI")
parser.add_argument("action", choices=[
    "me", 
    "log", 
    "fix", 
    "cover", 
    "tags", 
    "projects",
    "ping",
    "show",
])
parser.add_argument("--note", help="Log note", default="")
parser.add_argument("--duration", help="Duration in h(ours) or m(minutes)", default=None)
parser.add_argument("--day", help="Day in ISO format (2024-12-31)", default="")
parser.add_argument("--iso-from", help="Day in ISO format, from which show hours", default="")
parser.add_argument("--iso-to", help="Day in ISO format, to which show hours", default="")
parser.add_argument("--time-from", help="Starting time of record, 24h format (9:30, 15:45, 16:20)", default=None)
parser.add_argument("--time-to", help="Ending time of record, 24h format", default=None)
parser.add_argument("--plain", help="Dump the goods to STDOUT, no curses", action='store_true', default=False)
parser.add_argument("--json", help="JSON output", action='store_true', default=False)
args = parser.parse_args()

if args.action == "me":
    get_me()

elif args.action == "log":
    if args.duration is None and (args.time_from is None or args.time_to is None):
        cprint("[!] Psychics are on a coffee break", "red")
        cprint("No duration and vague/none time specified.", "cyan")
        sys.exit(2)
    log_time(args.note, args.duration, args.day, args.time_from, args.time_to)

elif args.action == "tags":
    get_tags(config["org"]["id"], plain=args.plain)
elif args.action == "projects":
    get_projects(config["org"]["id"], plain=args.plain)

elif args.action == "ping":
    ping = requests.get(
        "https://app.timelyapp.com/{}/assets/revision.json".format(config["org"]["id"]),
        headers=HEADERS,
        timeout=10
    )
    if 200 <= ping.status_code < 400:
        cprint(f"Pong. {ping.status_code}", "cyan")
    else:
        cprint(f"No pong. {ping.status_code}", "red")
        sys.exit(1)

elif args.action == "show":
    if args.iso_from == "":
        cprint("--iso-from flag missing", "red")
        sys.exit(2)
    if args.iso_to == "":
        cprint("--iso-to flag missing", "red")
        sys.exit(2)
    show_time(args.iso_from, args.iso_to, args.plain)
